#!/usr/bin/env python3
"""
Auto-generated deployment script - Created at 2025-03-02T17:54:50.049450
DO NOT MODIFY THIS FILE DIRECTLY
"""

import zlib
import base64
import tarfile
from io import BytesIO
from pathlib import Path
import sys

# Base64 encoded compressed data (size: 11,208 bytes)
DATA = (
    ""
)

def deploy(output_dir: Path = Path.cwd(), overwrite: bool = False):
    output_dir.mkdir(parents=True, exist_ok=True)

    print(f"Deploying to: {output_dir}")
    print(f"Total payload size: 10.9 KB")

    try:
        decoded = base64.b64decode(DATA)
        decompressed = zlib.decompress(decoded)

        with tarfile.open(fileobj=BytesIO(decompressed)) as tar:
            members = tar.getmembers()
            print(f"Extracting {len(members)} files...")

            for member in tar:
                target = output_dir / member.name
                if target.exists() and not overwrite:
                    print(f"Skipping existing: {target}")
                    continue
                tar.extract(member, path=output_dir)
                print(f"Extracted: {target}")

        print("Deployment completed successfully")

    except Exception as e:
        print(f"Deployment failed: {str(e)}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", type=Path, default=Path.cwd())
    parser.add_argument("-f", "--force", action="store_true", help="Overwrite existing files")
    args = parser.parse_args()

    deploy(args.output, args.force)
